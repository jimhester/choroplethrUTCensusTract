modFit <- train(I(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
set.seed(13234)
modFit <- train(as.factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
print(modFit$finalModel)
confusionMatrix(testSA$chd, predict(modFit, testSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(modFit, testSA))
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
print(modFit$finalModel)
confusionMatrix(testSA$chd, predict(modFit, testSA))
rm(list = ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
print(modFit$finalModel)
confusionMatrix(testSA$chd, predict(modFit, testSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(modFit, testSA))
missClass(trainSA, predict(modFit, trainSA))
predict(modFit, newdata = testSA)
head(trainSA)
data(SAheart)
SAheart$chd <- as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
print(modFit$finalModel)
predict(modFit, newdata = testSA)
confusionMatrix(testSA$chd, predict(modFit, testSA))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modFit, testSA))
missClass(as.numeric(testSA$chd), predict(modFit, testSA))
missClass(as.numeric(testSA$chd), as.numeric(predict(modFit, testSA))
)
missClass(as.numeric(testSA$chd), as.numeric(predict(modFit, testSA)))
missClass(as.numeric(trainSA$chd), as.numeric(predict(modFit, trainSA)))
library(ElemStatLearn)
data(SAheart)
#SAheart$chd <- as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
print(modFit$finalModel)
confusionMatrix(testSA$chd, predict(modFit, testSA))
sapply(SAheart, class)
predict(modFit, trainSA)
missClass(testSA$chd, predict(modFit, testSA))
missClass(trainSA$chd, predict(modFit, trainSA))
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
head(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modFit <- train(y ~ ., method = "rf", prox = TRUE, data = vowel.test)
modFit$finalModel
getTree(modFit$finalModel, k = 2)
?varImp
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modFit <- train(y ~ ., method = "rf", prox = TRUE, data = vowel.train)
varImp(modFit)
setwd("~/Google Drive/Data Science/my_twitter_archive")
update.packages()
library(ggplot2)
library(lubridate)
library(scales)
tweets <- read.csv("./july2015archive/tweets.csv", stringsAsFactors = FALSE)
tweets$timestamp <- ymd_hms(tweets$timestamp)
tweets$timestamp <- with_tz(tweets$timestamp, "America/Chicago")
ggplot(data = tweets, aes(x = timestamp)) +
geom_histogram(aes(fill = ..count..)) +
theme(legend.position = "none") +
xlab("Time") + ylab("Number of tweets") +
scale_fill_gradient(low = "midnightblue", high = "aquamarine4")
ggplot(data = tweets, aes(x = wday(timestamp, label = TRUE))) +
geom_histogram(breaks = seq(0.5, 7.5, by =1), aes(fill = ..count..)) +
theme(legend.position = "none") +
xlab("Day of the Week") + ylab("Number of tweets") +
scale_fill_gradient(low = "midnightblue", high = "aquamarine4")
chisq.test(table(wday(tweets$timestamp, label = TRUE)))
table(wday(tweets$timestamp, label = TRUE))
myTable <- table(wday(tweets$timestamp, label = TRUE))
myTable[,2]
myTable[2]
mean(myTable[c(1,6,7)])
mean(myTable[c(2:5)])
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(1/7, 1/7, 1/7, 1/7, 1/7, 1/7, 1/7))
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(1, 1, 1, 1, 1, 1, 1, 1)/7)
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(1, 1, 1, 1, 1, 1, 1)/7)
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])*3
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])*3
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(3, 4, 4, 4, 4, 3, 3)/25)
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(1, 1, 1, 1, 1, 1, 1)/7)
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(3, 4, 4, 4, 4, 3, 3)/25)
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])*3
myTable <- table(wday(tweets$timestamp, label = TRUE))
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])
1.25
1.25*4
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(4, 5, 5, 5, 5, 4, 4)/25)
20+4*3
chisq.test(table(wday(tweets$timestamp, label = TRUE)), p = c(4, 5, 5, 5, 5, 4, 4)/32)
mean(myTable[c(2:5)])/mean(myTable[c(1,6,7)])
5/4
tweets <- read.csv("./tweets.csv", stringsAsFactors = FALSE)
tweets$timestamp <- ymd_hms(tweets$timestamp)
tweets$timestamp <- with_tz(tweets$timestamp, "America/Chicago")
ggplot(data = tweets, aes(x = timestamp)) +
geom_histogram(aes(fill = ..count..)) +
theme(legend.position = "none") +
xlab("Time") + ylab("Number of tweets") +
scale_fill_gradient(low = "midnightblue", high = "aquamarine4")
setwd("~/Google Drive/Data Science/blog/juliasilge.github.io/_scripts")
./knitpages.R
source("./knitpages.R")
knit_folder("_R", "_posts", "figs/", "_caches/")
ls
pwd
rm(list = ls())
source("./knitpages.R")
knit_folder("_R", "_posts", "figs/", "_caches/")
source("./knitpages.R")
cd ..
setwd("~/Google Drive/Data Science/blog/juliasilge.github.io")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
tweets <- read.csv("./tweets.csv", stringsAsFactors = FALSE)
source("./_scripts/knitpages.R")
setwd("~/Google Drive/Data Science/blog/juliasilge.github.io")
ls()
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
tweets <- read.csv("./tweets.csv", stringsAsFactors = FALSE)
getwd()
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
class(tweets)
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
?render_jekyll
system("which jekyll")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
ggplot(data = tweets, aes(x = year(timestamp))) +
geom_histogram(breaks = seq(2008, 2015, by =1), aes(fill = ..count..)) +
theme(legend.position = "none") +
xlab("Time") + ylab("Number of tweets") +
scale_fill_gradient(low = "midnightblue", high = "aquamarine4")
ggplot(data = tweets, aes(x = year(timestamp))) +
geom_histogram(breaks = seq(2007.5, 2015.5, by =1), aes(fill = ..count..)) +
theme(legend.position = "none") +
xlab("Time") + ylab("Number of tweets") +
scale_fill_gradient(low = "midnightblue", high = "aquamarine4")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
pwd
getwd
getwd()
setwd("~/Google Drive/Data Science/blog/juliasilge.github.io")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
source("./_scripts/knitpages.R")
shiny::runApp('Google Drive/Data Science/datasciencecoursera/DataProducts/dataproductsproject/CountyHealthApp')
shiny::runApp('Google Drive/Data Science/datasciencecoursera/DataProducts/dataproductsproject/CountyHealthApp')
setwd("~/Google Drive/Data Science/datasciencecoursera/DataProducts/dataproductsproject")
runApp(display.mode = "showcase")
setwd("~/Google Drive/Data Science/datasciencecoursera/DataProducts/dataproductsproject/CountyHealthApp")
runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
install.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidifyLibrary')
install_github('ramnathv/slidify')
library(slidify)
install_github('ramnathv/slidifyLibraries')
library(slidifyLibraries)
setwd("~/Google Drive/Data Science/datasciencecoursera/DataProducts/dataproductsproject")
author("UtahCountyHealthDeck")
library(knitr)
slidify('index.Rmd')
browseURL("index.html")
browseURL('index.html')
Test Slide 2
slidify('index.Rmd')
slidify('index.Rmd')
health <- read.csv("./Health_Care_Indicators_By_Counties_In_Utah_2014.csv",
stringsAsFactors = FALSE)
health <- health[c(-1),]
health[,3:67] <- lapply(health[,3:67], as.numeric)
health <- health[,c(2:5,17,18,22,24,27,31,34,38,42,44,48,51,55,60,63,64)]
getwd()
health <- read.csv("./Health_Care_Indicators_By_Counties_In_Utah_2014.csv",
stringsAsFactors = FALSE)
health <- health[c(-1),]
health[,3:67] <- lapply(health[,3:67], as.numeric)
health <- health[,c(2:5,17,18,22,24,27,31,34,38,42,44,48,51,55,60,63,64)]
cor.test(health$Rural, health$Health.Care.Costs)
cor.test(health$Rural, health$Premature.Age.adjusted.Mortality)
For example, for these two indicators (the percentage of county population who are rural and the premature mortality rate), the correlation coefficient is `r round(myCor$estimate, digits = 3)` with a 95% confidence interval from `r round(myCor$conf.int[1], digits = 3` to `r round(myCor$conf.int[2], digits = 3)`.
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
?stat_smooth
names(health)
ggplot(data = health, aes(x = X..18, y = Health.Care.Costs)) +
geom_point(alpha = 0.6, size = 5) +
stat_smooth(method = "lm") +
xlab("Population under 18 (percent)") +
ylab("Median household income (dollars)")
slidify('index.Rmd')
names(health)
ggplot(data = health, aes(x = Median.Household.Income, y = X..Uninsured.1)) +
geom_point(alpha = 0.6, size = 7) +
stat_smooth(method = "lm") +
geom_point(data = subset(health, County == "Salt Lake"), size = 5, colour = "maroon") +
xlab("Median household income (dollars)") +
ylab("Health care costs (dollars per person)")
ggplot(data = health, aes(x = Median.Household.Income,
y = Children.Eligible.Free.Lunch...Free.Lunch)) +
geom_point(alpha = 0.6, size = 5) +
stat_smooth(method = "lm") +
geom_point(data = subset(health, County == "Salt Lake"), size = 7, colour = "maroon") +
xlab("Median household income (dollars)") +
ylab("Health care costs (dollars per person)")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish(title = 'Health Indicators in Utah Counties', 'index.html', host = 'rpubs')
publish(user = "juliasilge", repo = "CountyHealthDeck")
slidify('index.Rmd')
publish(title = 'Health Indicators in Utah Counties', 'index.html', host = 'rpubs')
update.packages()
library(choroplethrUTCensusTract)
data(package = "choroplethrUTCensusTract")
data("df_pop_ut_tract")
names(df_pop_ut_tract)
ut_tract_choropleth(df_pop_ut_tract)
ut_tract_choropleth(df_pop_ut_tract, title  = "2012 Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035)
rm(list = ls())
df = get_ut_tract_demographics(endyear=2012, span=5)
df <- get_ut_tract_demographics(endyear = 2012)
library(acs)
df <- get_ut_tract_demographics(endyear = 2012)
warnings()
library(stringr)
str_extract(df$region, "\\d{11}$")
df$region <- str_extract(df$region, "\\d{11}$")
df$value <- df$total_population
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1)
df <- get_ut_tract_demographics(endyear = 2010)
warnings()
df$region <- str_extract(df$region, "\\d{11}$")
df$value <- df$total_population
df <- get_ut_tract_demographics(endyear = 2010)
df$region <- str_extract(df$region, "\\d{11}$")
df$value <- df$total_population
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1, reference_map = )
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1, reference_map = TRUE)
data("ut.tract.regions")
names(ut.tract.regions)
grep("49035", ut.tract.regions$county.fips.character)
?grep
ut.tract.regions[grep("49035", ut.tract.regions$county.fips.character),]
ut.tract.map[grep("49035", ut.tract.map$county.fips.character),]
data("ut.tract.map")
ut.tract.map[grep("49035", ut.tract.map$county.fips.character),]
ut.tract.map[grep("49035", ut.tract.map$county.fips.numeric),]
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49021, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49021, num_colors = 1)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49033, num_colors = 1)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49049, num_colors = 1)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49049, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49053, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49055, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49043, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49045, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49045, num_colors = 1)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49045, num_colors = 1, reference_map = TRUE)
names(ut.tract.map)
View(ut.tract.map)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1, reference_map = TRUE)
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1)
?png
png(filename = "utahpoptracts.png", width = 300, height = 500, units = "px")
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1)
dev.off()
png(filename = "utahpopreference.png", width = 300, height = 500, units = "px")
ut_tract_choropleth(df, title  = "Salt Lake Census Tract\n Population Estimates", legend = "Population", county_zoom = 49035, num_colors = 1, reference_map = TRUE)
dev.off()
getwd()
ut.tract.regions[ut.tract.regions$county.fips.numeric %in% 49035, "region"]
ut.tract.regions$county.fips.numeric
summary(as.factor(ut.tract.regions$county.fips.numeric))
setwd("~/Google Drive/Data Science/choroplethrUTCensusTract")
install.packages("gpclib")
install.packages("rgdal")
update.packages()
library(gpclib)
gpclibPermit()
gpclibPermit()
gpclibPermit()
gpclibPermitStatus()
library(gpclib)
?gpclib
library(maptools)
gpclibPermitStatus()
gpclibPermit()
library(rgdal)
library(maptools)
library(gpclib)
gpclibPermit()
library(rgdal)
library(ggplot2)
library(dplyr)
utah = readOGR(dsn=".", layer="gz_2010_49_140_00_500k")
utah@data$id = rownames(utah@data)
utah.points = fortify(utah, region="id")
utah.df = join(utah.points, utah@data, by="id")
library(plyr)
utah@data$id = rownames(utah@data)
utah.points = fortify(utah, region="id")
utah.df = join(utah.points, utah@data, by="id")
ggplot(utah.df) +
aes(long,lat,group=group) +
geom_polygon()
theme_clean = function()
{
theme(
axis.title        = element_blank(),
axis.text         = element_blank(),
panel.background  = element_blank(),
panel.grid        = element_blank(),
axis.ticks.length = unit(0, "cm"),
panel.margin      = unit(0, "lines"),
plot.margin       = unit(c(0, 0, 0, 0), "lines"),
complete          = TRUE
)
}
ggplot(utah.df) +
aes(long,lat,group=group) +
geom_polygon() +
coord_map() +
theme_clean()
slc = utah.df[utah.df$COUNTYFP == "035", ]
ggplot(slc) +
aes(long,lat,group=group) +
geom_polygon() +
coord_map() +
theme_clean()
ggplot(utah.df) +
aes(long,lat,group=group) +
geom_polygon() +
coord_map() +
theme_clean()
slc <- utah.df[utah.df$COUNTY == "035", ]
ggplot(slc) +
aes(long,lat,group=group) +
geom_polygon() +
coord_map() +
theme_clean()
library(choroplethrCaCensusTract)
data("ca.tract.map")
names(ca.tract.map)
names(utah.df)
utah = readOGR(dsn=".", layer="cb_2014_49_tract_500k")
#utah = readOGR(dsn=".", layer="gz_2010_49_140_00_500k")
utah@data$id = rownames(utah@data)
utah.points = fortify(utah, region="id")
utah.df = join(utah.points, utah@data, by="id")
ggplot(utah.df) +
aes(long,lat,group=group) +
geom_polygon() +
coord_map() +
theme_clean()
slc <- utah.df[utah.df$COUNTYFP == "035", ]
ggplot(slc) +
aes(long,lat,group=group) +
geom_polygon() +
coord_map() +
theme_clean()
names(utah.df)
names(ca.tract.map)
utah.df$COUNTYFP
library(stringr)
?str_join
str_join("49", utah.df$COUNTYFP)
str_c("49", utah.df$COUNTYFP)
as.numeric(str_c("49", utah.df$COUNTYFP))
utah.df$county.fips.numeric <- as.numeric(str_c("49", utah.df$COUNTYFP))
as.character(utah.df$GEOID)
utah.df$region <- as.character(utah.df$GEOID)
ut.tract.map <- utah.df
data("ca.tract.regions")
names(ca.tract.regions)
View(ca.tract.regions)
utah@data$TRACTCE
utah@data$GEOID
ut.tract.regions <- data.frame(utah@data$GEOID, utah@data$TRACTCE)
colnames(ut.tract.regions) <- c("region", "TRACTCE")
ut.tract.regions$region
ut.tract.regions <- data.frame(utah@data$GEOID, utah@data$TRACTCE, stringsAsFactors = FALSE)
colnames(ut.tract.regions) <- c("region", "TRACTCE")
ut.tract.regions <- data.frame(utah@data$GEOID, utah@data$TRACTCE, stringsAsFactors = FALSE)
colnames(ut.tract.regions) <- c("region", "TRACTCE")
ut.tract.regions <- data.frame(as.character(utah@data$GEOID), utah@data$TRACTCE, stringsAsFactors = FALSE)
colnames(ut.tract.regions) <- c("region", "TRACTCE")
ut.tract.regions$region
str_extract(ut.tract.regions$region, "^\\d{5}")
as.numeric(str_extract(ut.tract.regions$region, "^\\d{5}"))
ut.tract.regions$county.fips.numeric <- as.numeric(str_extract(ut.tract.regions$region, "^\\d{5}"))
ut.tract.regions$county.fips.character <- str_extract(ut.tract.regions$region, "^\\d{5}")
setwd("~/Google Drive/Data Science/choroplethrUTCensusTract/gitrepo/choroplethrUTCensusTract/data")
library(devtools)
install_github("juliasilge/choroplethrUTCensusTract")
devtools::use_data(ut.tract.map, choroplethrUTCensusTract)
devtools::use_data(ut.tract.map, choroplethrUTCensusTract, overwrite = TRUE)
devtools::use_data(ut.tract.regions, choroplethrUTCensusTract, overwrite = TRUE)
choro = UtTractChoropleth$new(df_pop_ut_tract)
choro$set_num_colors(1)
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
library(choroplethrUTCensusTract)
choro = UtTractChoropleth$new(df_pop_ut_tract)
choro$set_num_colors(1)
choro$ggplot_polygon = geom_polygon(aes(fill = value), color = NA)
choro$render()
choro$set_zoom_tract(tract_zoom    = NULL, county_zoom = 49035)
choro$render()
